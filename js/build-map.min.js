const TILE={CLASS:{WALL:"wall",SPACE:"space",PLAYER:"player",MOB:"mob",BOSS:"boss",CHEST:"chest",QUEST:"quest",GOAL:"goal"},CHAR:{WALL:" ",SPACE:".",PLAYER:"P",MOB:"m",BOSS:"B",CHEST:"X",QUEST:"!",GOAL:"?"}},MAP={LENGTH:{SM:52,MD:77,LG:101},SUBNUM:{SM:3,MD:4,LG:5}},getRandNum=e=>e<=1?0:Math.floor(Math.random()*e),displayContents=e=>{let t=document.getElementById("map");for(t.innerHTML="",i=0;i<e.contents.length;i++){let l=document.createElement("span"),s=document.createAttribute("class"),a=document.createElement("span"),o=document.createAttribute("class");if(e.contents[i]==TILE.CHAR.WALL)s.value="tile "+TILE.CLASS.WALL;else switch(s.value="tile "+TILE.CLASS.SPACE,e.contents[i]){case TILE.CHAR.SPACE:break;case TILE.CHAR.PLAYER:o.value="elmt "+TILE.CLASS.PLAYER,a.setAttributeNode(o),l.appendChild(a);break;case TILE.CHAR.MOB:o.value="elmt "+TILE.CLASS.MOB,a.setAttributeNode(o),l.appendChild(a);break;case TILE.CHAR.BOSS:o.value="elmt "+TILE.CLASS.BOSS,a.setAttributeNode(o),l.appendChild(a);break;case TILE.CHAR.CHEST:o.value="elmt "+TILE.CLASS.CHEST,a.setAttributeNode(o),l.appendChild(a);break;case TILE.CHAR.QUEST:o.value="elmt "+TILE.CLASS.QUEST,a.setAttributeNode(o),l.appendChild(a);break;case TILE.CHAR.GOAL:o.value="elmt "+TILE.CLASS.GOAL,a.setAttributeNode(o),l.appendChild(a);break;default:let e=document.createElement("br");t.appendChild(e);continue}l.setAttributeNode(s),t.appendChild(l)}},getMapObject=e=>{if(0==e.length)return console.log("no map entered"),null;let t=e.split("\n");console.log("mapArr: ",t);let l=t[0].length,s=t.length,a=MAP.SUBNUM.SM,o=MAP.SUBNUM.SM,n=Math.ceil(s/o),r=Math.ceil(l/a);l>MAP.LENGTH.SM&&(a=MAP.SUBNUM.MD),l>MAP.LENGTH.MD&&(a=MAP.SUBNUM.LG),s>MAP.LENGTH.SM&&(o=MAP.SUBNUM.MD),s>MAP.LENGTH.MD&&(o=MAP.SUBNUM.LG);let c=[];for(let e=0;e<a;e++)for(let t=0;t<o;t++)c.push({xmin:0==e?0:e*r+1,xmax:(e+1)*r,ymin:0==t?0:t*n+1,ymax:(t+1)*n,contents:""});let u="",p=0;for(i=0;i<e.length;i++)e[i]==TILE.CHAR.SPACE&&p++,u+=e[i];const m=Math.floor(p/5),d=Math.floor(p/4);let g=parseInt(document.getElementById("mobrate").value);g<=0&&(g=.1,document.getElementById("mobrate").value=0);let h=parseInt(document.getElementById("playerrate").value);h<=0&&(h=.1,document.getElementById("playerrate").value=0);let b=parseInt(document.getElementById("bossrate").value);b<=0&&(b=.1,document.getElementById("bossrate").value=0);let E=parseInt(document.getElementById("questrate").value);E<=0&&(E=.1,document.getElementById("questrate").value=0);let M=parseInt(document.getElementById("goalrate").value);M<=0&&(M=.1,document.getElementById("goalrate").value=0);let A=parseInt(document.getElementById("chestrate").value);A<=0&&(A=.1,document.getElementById("chestrate").value=0);let S=parseInt(document.getElementById("successrate").value);return S<=0&&(S=.1,document.getElementById("successrate").value=0),{contents:u,height:s,width:l,submapHeight:n,submapWidth:r,emptySpaces:p,mobsMin:m,mobsMax:d,mobrate:g,playerrate:h,bossrate:b,questrate:E,goalrate:M,chestrate:A,successrate:S,mobs:[],quests:[],goals:[],chests:[],submaps:c,player:null,boss:null}},populateMap=e=>{if(null==e)return console.log("no map entered"),!1;return e.playerrate+e.bossrate+e.questrate+e.goalrate+e.chestrate>=e.mobrate?(console.log("too few mobs compared to other interactive elements"),!1):e.mobrate+e.playerrate+e.bossrate+e.questrate+e.goalrate+e.chestrate>=1e3?(console.log("too many interactive elements"),!1):(populateMobs(e),populateOthers(e),!0)},populateMobs=e=>{if(null==e)return console.log("no map entered"),!1;let t="",l=e.contents,s=0,a=0;for(;e.mobs.length<e.mobsMin;){for(i=0;i<l.length;i++){if(l[i]===TILE.CHAR.SPACE&&e.mobs.length<e.mobsMax){let o=getRandNum(1e3),n=getRandNum(100);o<e.mobrate&&n<e.successrate?(t+=TILE.CHAR.MOB,e.mobs.push({x:s,y:a})):t+=l[i]}else t+=l[i];"\n"!=l[i]&&(s++,s>=e.width&&(s=0,a++))}console.log("Mobs placed: ",e.mobs.length),l=t,t="",s=0,a=0}return e.contents=l,!0},populateOthers=e=>{if(null==e)return console.log("no map entered"),!1;let t="",l=e.contents,s=0,a=0;for(console.log("checking while conditions ...");null==e.player||null==e.boss||e.quests.length<1||e.goals.length<e.quests.length||e.chests.length<1;){for(console.log("Placing interactive elements ..."),i=0;i<l.length;i++){if(l[i]===TILE.CHAR.SPACE){let o=getRandNum(1e3);getRandNum(100)>=successrate?t+=l[i]:o<e.playerrate?null!=e.player?t+=l[i]:(console.log("Placing player spawning point ..."),t+=TILE.CHAR.PLAYER,e.player={x:s,y:a}):o<e.playerrate+e.bossrate?null!=e.boss?t+=l[i]:(console.log("Placing boss ..."),t+=TILE.CHAR.BOSS,e.boss={x:s,y:a}):o<e.playerrate+e.bossrate+e.questrate?e.quests.length>=Math.sqrt(e.submaps.length)?t+=l[i]:(console.log("Placing quest ..."),t+=TILE.CHAR.QUEST,e.quests.push({x:s,y:a})):o<e.playerrate+e.bossrate+e.questrate+e.goalrate?e.goals.length>=e.quests.length?t+=l[i]:(console.log("Placing goal ..."),t+=TILE.CHAR.GOAL,e.goals.push({x:s,y:a})):o<e.playerrate+e.bossrate+e.questrate+e.goalrate+e.chestrate?e.chests.length>=e.submaps.length?t+=l[i]:(console.log("Placing treasure chest ..."),t+=TILE.CHAR.CHEST,e.chests.push({x:s,y:a})):t+=l[i]}else t+=l[i];"\n"!=l[i]&&(s++,s>=e.width&&(s=0,a++))}console.log("Interactive elements placed."),l=t,t="",s=0,a=0}return e.contents=l,!0},downloadMap=e=>{const t=new Blob([e.contents],{type:"text/plain;charset=utf-8"});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(t,"generated-map.txt");else{let e=document.getElementById("download");const l=URL.createObjectURL(t);e.href=l,e.download="generated-map.txt"}},divideMap=e=>{if(null==e)return!1;let t=0,l=0;for(let s=0;s<e.contents.length;s++)if("\n"!=e.contents[s]){for(let a=0;a<e.submaps.length;a++)t<=e.submaps[a].xmax&&t>=e.submaps[a].xmin&&l<=e.submaps[a].ymax&&l>=e.submaps[a].ymin&&(e.submaps[a].contents+=e.contents[s]);t<e.width?t++:(t=0,l++)}return!0},scoreMap=e=>{if(null==e)return!1;let t=document.getElementById("score");divideMap(e),console.log("Map to evaluate: ",e);let l=evalDistPlayerBoss(e);console.log("Player / Boss score: ",l);let s=evalMobsSpread(e);console.log("Mob spread score: ",s);let a=evalQuestsSpread(e);console.log("Quest spread score: ",a);let o=evalTreasureSpread(e);console.log("Chest spread score: ",o);let n=25*(l+s+a+o)/4;console.log("Map score: ",n),t.value=n},evalDistPlayerBoss=e=>{console.log("Player coord: \n x: ",e.player.x,"\n y: ",e.player.y),console.log("boss coord: \n x: ",e.boss.x,"\n y: ",e.boss.y);let t=Math.sqrt(Math.pow(Math.abs(e.boss.x-e.player.x),2)+Math.pow(Math.abs(e.boss.y-e.player.y),2));console.log("distance: ",t),console.log("map size: ",e.width);let l=0;return t<e.width/2?l=0:t<2*e.width/3?l=1:t<3*e.width/4?l=2:t<4*e.width/5?l=3:t<6*e.width/5?l=4:t<5*e.width/4?l=3:t<4*e.width/3?l=2:t<3*e.width/2&&(l=1),l},evalQuestsSpread=e=>{let t=0,l=0;for(let s=0;s<e.submaps.length;s++){for(let t=0;t<e.submaps[s].contents.length;t++)e.submaps[s][t]!=TILE.CHAR.QUEST&&e.submaps[s][t]!=TILE.CHAR.GOAL||l++;l>t&&(t=l)}let s=0;switch(t){case 1:s=4;break;case 2:s=2;break;case 3:s=1}return s},evalTreasureSpread=e=>{let t=0,l=0;for(let s=0;s<e.submaps.length;s++){for(let t=0;t<e.submaps[s].contents.length;t++)e.submaps[s][t]==TILE.CHAR.CHEST&&l++;l>t&&(t=l)}let s=0;switch(t){case 1:s=4;break;case 2:s=2;break;case 3:s=1}return s},evalMobsSpread=e=>{let t=0,l=1e3,s=0;for(let a=0;a<e.submaps.length;a++){for(let t=0;t<e.submaps[a].contents.length;t++)e.submaps[a][t]==TILE.CHAR.MOB&&s++;s<l&&(l=s),s>t&&(t=s)}let a=0;return t-l<10?a=4:t-l<20?a=3:t-l<30?a=2:t-l<40&&(a=1),a},trimOuterWalls=e=>{let t=e.split("\n");console.log("mapArr: ",t);let l=[];for(let e=0;e<t.length;e++)l.push("");for(let e=0;e<t.length;e++)if(console.log("line empty: ",""==t[e].trim()),""!=t[e].trim())for(let s=0;s<t[e].length;s++)l[s]+=t[e][s];let s=[];for(let e=0;e<l[0].length;e++)s.push("");console.log("mapArrR: ",l);for(let e=0;e<l.length;e++)if(console.log("line empty: ",""==l[e].trim()),""!=l[e].trim())for(let t=0;t<l[e].length;t++)s[t]+=l[e][t];console.log("outputArr: ",s);let a="";for(let e=0;e<s.length;e++)a+=s[e],a+="\n";return console.log("outputStr: ",a),a},loadFile=e=>{fetch(e,{method:"GET",headers:{"Content-Type":"text/plain"}}).then(e=>{200===e.status?e.text().then(e=>{let t=getMapObject(trimOuterWalls(e));populateMap(t),downloadMap(t),displayContents(t),scoreMap(t)}):console.log("Looks like there was a problem. Status Code: "+e.status)}).catch(e=>{console.log("Fetch Error :-S",e)})},loadMap=()=>{fetch("./assets/map.txt",{method:"GET",headers:{"Content-Type":"text/plain"}}).then(e=>{200===e.status?e.text().then(e=>{let t=getMapObject(trimOuterWalls(e));populateMap(t),downloadMap(t),displayContents(t),scoreMap(t)}):console.log("Looks like there was a problem. Status Code: "+e.status)}).catch(e=>{console.log("Fetch Error :-S",e)})};fetch("./assets/map.txt",{method:"GET",headers:{"Content-Type":"text/plain"}}).then(e=>{200===e.status?e.text().then(e=>{let t=getMapObject(trimOuterWalls(e));populateMap(t),downloadMap(t),displayContents(t),scoreMap(t)}):console.log("Looks like there was a problem. Status Code: "+e.status)}).catch(e=>{console.log("Fetch Error :-S",e)});